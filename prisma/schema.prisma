// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(uuid())
  userId         String    @unique
  name           String    @default("New User")
  userName       String    @unique
  imageUrl       String    @db.Text
  email          String    @db.Text
  profiles       Profile[]
  mostRecentLang String    @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Profile {
  id              String   @id @default(uuid())
  userId          String   @unique
  user            User     @relation(fields: [userId], references: [id])
  language        Language
  coins           Int      @default(0)
  superCoins      Int      @default(0)
  lessonsProgress Int      @default(0)
  unitsProgress   Int      @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Language {
  FR
  DE
  ES
  IT
}

// = language
model Course {
  id          String   @id @default(uuid())
  title       String
  image       String
  description String
  lessons     Lesson[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// = ethans age
model Lesson {
  id       String @id @default(uuid())
  index    Int
  title    String
  units    Unit[]
  courseId String
  course   Course @relation(fields: [courseId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// = small step
model Unit {
  id    String @id @default(uuid())
  index Int
  title String

  tasks Task[]

  lessonId String
  lesson   Lesson @relation(fields: [lessonId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum TaskType {
  SELECT
  GAPS
  MATCH
  LISTEN
}

// = one task, like match the words
model Task {
  id    String @id @default(uuid())
  index Int
  title String
  type  String

  unitId String
  unit   Unit   @relation(fields: [unitId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
