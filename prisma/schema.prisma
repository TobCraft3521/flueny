// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default(uuid())
  userName String @unique
  userId   String @unique

  email    String @unique
  imageUrl String @db.Text

  mostRecentLang Language?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Define the relationship with profiles
  profiles Profile[]
}

model Profile {
  id         String   @id @default(uuid())
  userId     String
  language   Language
  coins      Int      @default(0)
  superCoins Int      @default(0)
  progress   Int      @default(0)

  // challenge session
  challengeProgress Int      @default(0)
  hearts            Int      @default(5)
  startedAt         DateTime @default(now())

  //

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Define the relationship with user
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, language])
}

enum Language {
  FR
  DE
  ES
  IT
}

// = language
model Course {
  id          String   @id @default(uuid())
  title       String
  image       String
  description String
  language    Language
  lessons     Lesson[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// = topic / level / category eg basic words and grammar
model Lesson {
  id          String @id @default(uuid())
  index       Int
  title       String
  description String @default("")
  image       String @default("")
  units       Unit[]
  color1Hex   String @default("#58cc02")
  color2Hex   String @default("#58cc02")
  courseId    String
  course      Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// = ethans age
model Unit {
  id        String @id @default(uuid())
  index     Int
  title     String
  timeLimit Int    @default(60) // in seconds

  tasks Task[]

  lessonId String
  lesson   Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum TaskType {
  VOCMATCH
  VOCINTRO
  GAP
  LISTENING
}

// = one task, like match the words
model Task {
  id          String @id @default(uuid())
  index       Int
  description String

  type    TaskType
  options Json
  // vocmatch: there are simply two arrays of words, and the solution is the order of the indexes of the words that correspond to the second array. eg: ["apple", "banana"] ["banane", "pomme"] => apple is pomme so index 1 and banana is banane so index 0 => solution = 10
  // vocintro: in the description it says which of these is xyz, the options is an array of objects containing a the word b the image path and c the sound path
  // gap: there is one array of words and the solution is the order of the indexes like in vocmatch, eg i drink ___ (water) options: juice, water => solution = 1 (or more numbers if more gaps)
  // listening: there is an object containing the path to the sound file as well as an array of words that are options for the description, eg it says who stole the money, and the options are ["john", "peter", "mary"] and the sound file says "peter" => solution = 1

  solution String

  unitId String
  unit   Unit   @relation(fields: [unitId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
